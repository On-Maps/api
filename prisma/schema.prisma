// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator prismaClassGenerator {
  provider = "prisma-class-generator"
    dryRun = "false"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model Campus {
  id          Int      @id @default(autoincrement())
  name        String
  city        String
  state       String
  phone       String?
  email       String?
  university  University @relation(fields: [universityId], references: [id], onDelete: Cascade)
  universityId Int
  place       Place[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model University {
  id          Int      @id @default(autoincrement())
  name        String
  acronym     String
  address     String
  campuses    Campus[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Place {
  id          Int      @id @default(autoincrement())
  name        String
  campus      Campus @relation(fields: [campusId], references: [id], onDelete: Cascade)
  campusId    Int
  image       Image[]
  floor        Int?
  description String?
  events     Event[]
  open        Boolean
  timestamp   DateTime
  building    String?
  category    Category[]
  position    Position[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Image {
  id          Int      @id @default(autoincrement())
  url         String
  place       Place @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Position {
  id          Int      @id @default(autoincrement())
  latitude    Float
  longitude   Float
  place       Place @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  place       Place @relation(fields: [placeId], references: [id])
  placeId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  date        DateTime?
  place        Place @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  userToken   UserToken[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserToken {
  id          Int      @id @default(autoincrement())
  token       String   @unique
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  expiresDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
