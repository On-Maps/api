// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator prismaClassGenerator {
  provider = "prisma-class-generator"
    dryRun = "false"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model Campus {
  id          Int      @id @default(autoincrement())
  name        String
  city        String
  state       String
  phone       String
  email       String
  university  University @relation(fields: [universityId], references: [id])
  universityId Int
  rooms       Room[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model University {
  id          Int      @id @default(autoincrement())
  name        String
  acronym     String
  address     String
  campuses    Campus[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Room {
  id          Int      @id @default(autoincrement())
  name        String
  campus      Campus @relation(fields: [campusId], references: [id])
  campusId    Int
  piso        Int
  description String
  eventos     Evento[]
  open        Boolean
  timestamp   DateTime
  category    Category[]
  latitude    Float
  longitude   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  room        Room @relation(fields: [roomId], references: [id])
  roomId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Evento {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  date        DateTime
  room        Room @relation(fields: [roomId], references: [id])
  roomId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  userToken   UserToken[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserToken {
  id          Int      @id @default(autoincrement())
  token       String   @unique
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  expiresDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}